C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SYS
OBJECT MODULE PLACED IN .\Objects\sys.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\SYS\sys.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\hardware\ADC;..\hardware\debug;..\hardware\DELAY;..\hardware\Flash;..\hardware\HT1621B;..\hardware\Key;..\hardware\my_s
                    -tdio;..\hardware\OLED;..\hardware\product;..\hardware\Pwm;..\hardware\SYS;..\hardware\Timer;..\hardware\Uart;..\hardware
                    -\WDT;..\My_os) DEBUG OBJECTEXTEND PRINT(.\Listings\sys.lst) OBJECT(.\Objects\sys.obj)

line level    source

   1          #include "sys.h"
   2          #include "uart.h"
   3          #include "timer.h"
   4          #include "flash.h"
   5          #include "key.h"
   6          #include "lcd_display.h"
   7          #include "ht1621b.h"
   8          #include "oled.h"
   9          #include "adc.h"
  10          #include "pwm.h"
  11          #include "delay.h"
  12          #include "wdt.h"
  13          #include "product.h"
  14          
  15          var_system_st g_Var_system;
  16          
  17          #define SKU_NUM   5
  18          
  19          void Init_Config(void)
  20          {
  21   1          device_init();
  22   1          EA = 1;
  23   1          Timer1Init();
  24   1          uart_init();
  25   1          key_init();
  26   1          adc_init();
  27   1          init_lcd_ht1621b();
  28   1          flash_init();
  29   1          pwm_init();
  30   1          System_Var_Init();
  31   1          wdt_init(2);
  32   1          set_pwm(5);
  33   1          product_check_process();
  34   1          set_pwm(0);
  35   1      }
  36          
  37          void System_Var_Init(void)
  38          {
  39   1          g_Var_system.bCalibration_std = False;
  40   1          g_Var_system.bFirst_heat_std = False;
  41   1          g_Var_system.bHeat_start_std = False;
  42   1          g_Var_system.bLed_std = False;
  43   1          g_Var_system.bPreheat_std = False;
  44   1          g_Var_system.bProtect_std = False;
  45   1          g_Var_system.bSTATUS = OFF;
  46   1          g_Var_system.bError_E = False;
  47   1          g_Var_system.bRes_std = False;
  48   1          g_Var_system.bError_F = False;
  49   1          g_Var_system.Led_Timeout = 0;
  50   1          g_Var_system.Preheat_time = 0;
  51   1          g_Var_system.Time_cnt = 0;
  52   1          g_Var_system.Protect_time = 0;
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 2   

  53   1          g_Var_system.Heat_D_Value = 0;
  54   1          g_Var_system.PWM_Status = OFF;
  55   1          g_Var_system.AC_POWER_CNT = HEAT_POWER;
  56   1          g_Var_system.AC_STATUS = 0;
  57   1          LED_BACK = 1;
  58   1          delay_ms(2000);//500ms
  59   1          ht1621_all_clear();
  60   1      //    gap_display(5);
  61   1          lcd_display_gap(SKU_NUM);
  62   1          delay_ms(2000);//500ms
  63   1          LED_BACK = 0;
  64   1      }
  65          
  66          /*********************************************************************************************/
  67          static void Set_Preheat_time(u8 gap)
  68          {
  69   1          switch (gap)
  70   1          {
  71   2              case GAP_WARM:
  72   2                  g_Var_system.Preheat_time = PREHEAT_time_warm;
  73   2                  break;
  74   2              case GAP_1:
  75   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_1;
  76   2                  break;
  77   2              case GAP_2:
  78   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_2;
  79   2                  break;
  80   2              case GAP_3:
  81   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_3;
  82   2                  break;
  83   2              case GAP_4:
  84   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_4;
  85   2                  break;
  86   2              case GAP_5:
  87   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_5;
  88   2                  break;
  89   2              case GAP_6:
  90   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_6;
  91   2                  break;
  92   2              case GAP_7:
  93   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_7;
  94   2                  break;
  95   2              case GAP_8:
  96   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_8;
  97   2                  break;
  98   2              case GAP_9:
  99   2                  g_Var_system.Preheat_time = PREHEAT_time_GAP_9;
 100   2                  break;
 101   2          }
 102   1      }
 103          static void D_Value_Set(void)
 104          {
 105   1          switch (flash_info.gap)
 106   1          {
 107   2              case GAP_WARM:
 108   2                  g_Var_system.Heat_D_Value = HEAT_D_value_WARM_temp;
 109   2                  break;
 110   2              case GAP_1:
 111   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_1_temp;
 112   2                  break;
 113   2              case GAP_2:
 114   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_2_temp;
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 3   

 115   2                  break;
 116   2              case GAP_3:
 117   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_3_temp;
 118   2                  break;
 119   2              case GAP_4:
 120   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_4_temp;
 121   2                  break;
 122   2              case GAP_5:
 123   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_5_temp;
 124   2                  break;
 125   2              case GAP_6:
 126   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_6_temp;
 127   2                  break;
 128   2              case GAP_7:
 129   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_7_temp;
 130   2                  break;
 131   2              case GAP_8:
 132   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_8_temp;
 133   2                  break;
 134   2              case GAP_9:
 135   2                  g_Var_system.Heat_D_Value = HEAT_D_value_GAP_9_temp;
 136   2                  break;
 137   2          }
 138   1      }
 139          static void set_time_sec(void)
 140          {
 141   1          switch (flash_info.timer)
 142   1          {
 143   2              case TIMER_ON:
 144   2                  g_Var_system.Time_cnt = 0;
 145   2      
 146   2                  break;
 147   2              case TIMER_0_5H:
 148   2                  g_Var_system.Time_cnt = H_0_5;
 149   2      
 150   2                  break;
 151   2              case TIMER_1H:
 152   2                  g_Var_system.Time_cnt = H_1_0;
 153   2      
 154   2                  break;
 155   2              case TIMER_2H:
 156   2                  g_Var_system.Time_cnt = H_2_0;
 157   2      
 158   2                  break;
 159   2             
 160   2              case TIMER_4H:
 161   2                  g_Var_system.Time_cnt = H_4_0;
 162   2      
 163   2                  break;
 164   2             
 165   2              case TIMER_8H:
 166   2                  g_Var_system.Time_cnt = H_8_0;
 167   2      
 168   2                  break;
 169   2      
 170   2          }
 171   1      }
 172          
 173          static void Protect_Temperature(void)
 174          {
 175   1          if(flash_info.gap >= GAP_6)
 176   1          {     
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 4   

 177   2             g_Var_system.Protect_time++;
 178   2              if(g_Var_system.Protect_time > H_1_0)
 179   2              {
 180   3      //         flash_info.gap = GAP_5;
 181   3      //         Var_info_display.gap = GAP_5;
 182   3                       g_Var_system.Protect_time = 0;
 183   3              }  
 184   2          }
 185   1         
 186   1      }
 187          
 188          static void Res_Test(void)
 189          {
 190   1        if(Res_IO)
 191   1              {
 192   2            g_Var_system.bRes_std = Ture;
 193   2          }
 194   1      }
 195          
 196          static void Preheat_Process(void)
 197          {
 198   1          if (g_Var_system.bHeat_start_std == Ture)
 199   1          {
 200   2              if (--g_Var_system.Preheat_time < 1)
 201   2              {
 202   3                  g_Var_system.bPreheat_std = False;
 203   3                  g_Var_system.bHeat_start_std = False;
 204   3                  D_Value_Set();
 205   3              }
 206   2          }
 207   1      
 208   1      }
 209          
 210          void Time_Count_Process(void)
 211          {
 212   1          if (get_device_state() == ON)
 213   1          {
 214   2              Preheat_Process();
 215   2                      Protect_Temperature();
 216   2              if (g_Var_system.Time_cnt > 1)
 217   2              {
 218   3                  g_Var_system.Time_cnt--;
 219   3              }
 220   2              else if(flash_info.timer != TIMER_ON)
 221   2              {
 222   3                  g_Var_system.Time_cnt = 0;
 223   3                  g_Var_system.Preheat_time = 0;
 224   3                  set_device_state(OFF);
 225   3                  ht1621_send_cmd(LCD_OFF);
 226   3              }
 227   2          }
 228   1      }
 229          
 230          void Controll_Heat(u16 temp_set, u16 temp_now)
 231          {
 232   1          if (temp_now >  temp_set)
 233   1          {
 234   2              set_pwm(0);
 235   2          }
 236   1          else if (temp_now < (temp_set - g_Var_system.Heat_D_Value))
 237   1          {
 238   2              set_pwm(5);
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 5   

 239   2          }
 240   1      }
 241          
 242          void Set_Temp(u16 temp)
 243          {
 244   1          if (g_Var_system.bPreheat_std == Ture)
 245   1          {
 246   2      
 247   2              Controll_Heat(One_Heat_Temp, temp);
 248   2          }
 249   1          else
 250   1          {
 251   2              switch (flash_info.gap)
 252   2              {
 253   3                  case GAP_WARM:
 254   3                      Controll_Heat(GAP_WARM_temp, temp);
 255   3                      break;
 256   3                  case GAP_1:
 257   3                      Controll_Heat(GAP_1_temp, temp);
 258   3                      break;
 259   3                  case GAP_2:
 260   3                      Controll_Heat(GAP_2_temp, temp);
 261   3                      break;
 262   3                  case GAP_3:
 263   3                      Controll_Heat(GAP_3_temp, temp);
 264   3                      break;
 265   3                  case GAP_4:
 266   3                      Controll_Heat(GAP_4_temp, temp);
 267   3                      break;
 268   3                  case GAP_5:
 269   3                      Controll_Heat(GAP_5_temp, temp);
 270   3                      break;
 271   3                  case GAP_6:
 272   3                      Controll_Heat(GAP_6_temp, temp);
 273   3                      break;
 274   3                  case GAP_7:
 275   3                      Controll_Heat(GAP_7_temp, temp);
 276   3                      break;
 277   3                  case GAP_8:
 278   3                      Controll_Heat(GAP_8_temp, temp);
 279   3                      break;
 280   3                  case GAP_9:
 281   3                      Controll_Heat(GAP_9_temp, temp);
 282   3                      break;
 283   3              }
 284   2          }
 285   1      }
 286          
 287          
 288          /*********************************************************************************************/
 289          static u16 temp_calc(u16 uR510, u16 uRw)
 290          {
 291   1          u8 i = 0;
 292   1          u8 basi_tmp = 50;
 293   1          u8 k = 10;
 294   1          float u1 = 0;
 295   1      
 296   1          if ((uR510 < 50) || (uR510 > uRw))
 297   1          {
 298   2              return 101;
 299   2          }
 300   1          u1 = (((float) uRw / 1000) - ((float) uR510 / 1000)) / (((float) uR510 / 1000) / 510);
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 6   

 301   1          if (u1 < 0)
 302   1          {
 303   2              return 102;
 304   2          }
 305   1      //      gm_printf ( "R = %f  \r\n",u1 );
 306   1          u1 = u1 / Length;
 307   1          if (u1 < 73)
 308   1          {
 309   2              return 0;
 310   2          }
 311   1          //   gm_printf("average R = %f \r\n",u1);
 312   1          u1 = u1 / Temperature_Value;
 313   1         // gm_printf("cmp = %f \r\n",u1);
 314   1          if (u1 * Temperature_Value > Temperature_Value)
 315   1          {
 316   2              while (1)
 317   2              {
 318   3                  u1 = u1 / (1 + 0.0048);
 319   3                  i++;
 320   3                  if (u1 <= 1)
 321   3                  {
 322   4                      break;
 323   4                  }
 324   3      
 325   3              }
 326   2              basi_tmp = basi_tmp + i;
 327   2      
 328   2          }
 329   1          else
 330   1          {
 331   2              while (1)
 332   2              {
 333   3                  u1 = u1 / (1 - 0.0048);
 334   3                  i++;
 335   3                  if (u1 >= 1)
 336   3                  {
 337   4                      break;
 338   4                  }
 339   3              }
 340   2      
 341   2              basi_tmp = basi_tmp - i;
 342   2          }
 343   1      
 344   1          return (basi_tmp);
 345   1      }
 346          
 347          void temperature_handle(void)    //per second
 348          {
 349   1          u16 temp = 0;
 350   1          u16 adc_val1 = 0, adc_val3 = 0;
 351   1          Res_Test();
 352   1          get_voltage(&adc_val1, &adc_val3);
 353   1          //KEY_printf ( "adv1 = %d adv3 =%d \r\n",adc_val1,adc_val3 );  //pjw set
 354   1          temp = temp_calc(adc_val1, adc_val3);
 355   1      //    gm_printf ( "temp val:%d \r\n",temp );
 356   1      
 357   1          if ((adc_val1 > 50) && (g_Var_system.bRes_std == 0))
 358   1          {
 359   2              if (get_device_state() == ON)
 360   2              {
 361   3                  if (g_Var_system.bFirst_heat_std == 1)
 362   3                  {
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 7   

 363   4                      g_Var_system.bFirst_heat_std = 0;
 364   4                      if (temp > 50)
 365   4                      {
 366   5                          g_Var_system.bHeat_start_std = 1;
 367   5                          g_Var_system.bPreheat_std = 0;
 368   5                          g_Var_system.Heat_D_Value = HEAT_D_value_GAP_9_temp;
 369   5      
 370   5                      }
 371   4                      else
 372   4                      {
 373   5                          g_Var_system.bHeat_start_std = 1;
 374   5                          g_Var_system.bPreheat_std = 1;
 375   5                          g_Var_system.Heat_D_Value = HEAT_D_value_WARM_temp;
 376   5                      }
 377   4                  }
 378   3                  Set_Temp(temp);
 379   3              }
 380   2              else
 381   2              {
 382   3                  set_pwm(0);
 383   3                  ht1621_send_cmd(LCD_OFF);
 384   3              }
 385   2              g_Var_system.bError_F = False;
 386   2              lcd_display_blink_set(NO_EORROR);
 387   2          }
 388   1          else if (g_Var_system.bRes_std == 0)
 389   1          {
 390   2              g_Var_system.bCalibration_std = False;
 391   2              lcd_display_blink_set(F_FLASH);
 392   2              set_pwm(0);
 393   2              g_Var_system.bError_F = Ture;
 394   2          }
 395   1          else if (g_Var_system.bRes_std == Ture)
 396   1          {
 397   2              g_Var_system.bCalibration_std = False;
 398   2              lcd_display_blink_set(E_FLASH);
 399   2              set_pwm(0);
 400   2              g_Var_system.bError_F = Ture;
 401   2          }
 402   1          display_gap_process(Var_info_display.blink_std);
 403   1      }
 404          /*********************************************************************************************/
 405          
 406          void Led_On(void)
 407          {
 408   1          g_Var_system.bLed_std = ON;
 409   1          g_Var_system.Led_Timeout = 0;
 410   1      }
 411          
 412          void Led_Off(void)
 413          {
 414   1          g_Var_system.bLed_std = OFF;
 415   1          g_Var_system.Led_Timeout = 0;
 416   1      }
 417          
 418          void Led_Process(void)
 419          {
 420   1          if (g_Var_system.bLed_std == ON)
 421   1          {
 422   2              LED_BACK = 1;
 423   2              if (++g_Var_system.Led_Timeout >= 150)
 424   2              {
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 8   

 425   3                  LED_BACK = 0;
 426   3                  g_Var_system.Led_Timeout = 0;
 427   3                  g_Var_system.bLed_std = OFF;
 428   3              }
 429   2          }
 430   1          else
 431   1          {
 432   2              LED_BACK = 0;
 433   2          }
 434   1      }
 435          /*********************************************************************************************/
 436          
 437          u8 get_device_state(void)
 438          {
 439   1          return g_Var_system.bSTATUS;
 440   1      }
 441          
 442          void set_device_state(u8 state)
 443          {
 444   1          g_Var_system.bSTATUS = state;
 445   1      }
 446          
 447          static void Set_SYS_Status(void)
 448          {
 449   1          if (g_Var_system.bError_F == False)
 450   1          {
 451   2              if (get_device_state() == ON)
 452   2              {
 453   3                  set_device_state(OFF);
 454   3                  ht1621_send_cmd(LCD_OFF);
 455   3                  Led_Off();
 456   3              }
 457   2              else
 458   2              {
 459   3                  set_device_state(ON);
 460   3                  Led_On();
 461   3                  set_time_sec();
 462   3                  g_Var_system.bFirst_heat_std = 1;
 463   3                  Set_Preheat_time(flash_info.gap);
 464   3                  lcd_display_gap(flash_info.gap);
 465   3                  lcd_display_time(flash_info.timer);
 466   3              }
 467   2          }
 468   1      }
 469          
 470          static void Gap_Status_Set(void)
 471          {
 472   1          if ((get_device_state() == ON) && (g_Var_system.bError_F == False))
 473   1          {
 474   2              Led_On();
 475   2              if (flash_info.gap < GAP_9)
 476   2              {
 477   3                  flash_info.gap++;
 478   3              }
 479   2              else
 480   2              {
 481   3                  flash_info.gap = GAP_1;
 482   3              }
 483   2              g_Var_system.bFirst_heat_std = 1;
 484   2              lcd_display_gap(flash_info.gap);
 485   2              Set_Preheat_time(flash_info.gap);
 486   2              flah_save_data();
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 9   

 487   2          }
 488   1      }
 489          
 490          static void Time_Status_Set(void)
 491          {
 492   1          if ((get_device_state() == ON) && (g_Var_system.bError_F == False))
 493   1          {
 494   2              Led_On();
 495   2              if (flash_info.timer < TIMER_8H)
 496   2              {
 497   3                  flash_info.timer++;
 498   3              }
 499   2              else
 500   2              {
 501   3                  flash_info.timer = TIMER_ON;
 502   3              }
 503   2              lcd_display_time(flash_info.timer);
 504   2              set_time_sec();
 505   2              flah_save_data();
 506   2          }
 507   1      }
 508          void key_handle(void)
 509          {
 510   1          u8 temp = key_scan();
 511   1          switch (temp)
 512   1          {
 513   2              case LED_STAY_ON:
 514   2                  Set_SYS_Status();
 515   2                  break;
 516   2              case KEY_3_PRES:
 517   2                  Time_Status_Set();
 518   2                  break;
 519   2              case KEY_2_PRES:
 520   2                  Gap_Status_Set();
 521   2                  break;
 522   2          }
 523   1      
 524   1      }
 525          
 526          
 527          void STATUS_MACHINE(void)
 528          {
 529   1        if(Vartime.bSystick_10ms == Ture)
 530   1              {
 531   2            key_handle(); 
 532   2                Vartime.bSystick_10ms = False;
 533   2          }
 534   1        if(Vartime.bSystick_20ms == Ture)
 535   1              {
 536   2            Led_Process(); 
 537   2                Vartime.bSystick_20ms = False;
 538   2          }
 539   1        if(Vartime.bSystick_500ms == Ture)
 540   1              {
 541   2            temperature_handle(); 
 542   2                Vartime.bSystick_500ms = False;
 543   2          }
 544   1        if(Vartime.bSystick_100ms == Ture)
 545   1              {
 546   2            display_process(); 
 547   2                Vartime.bSystick_100ms = False;
 548   2          }
C51 COMPILER V9.56.0.0   SYS                                                               02/25/2021 10:18:04 PAGE 10  

 549   1         if(Vartime.bSystick_1s == Ture)
 550   1              {
 551   2            Time_Count_Process(); 
 552   2                Vartime.bSystick_1s = False;
 553   2          }
 554   1      }
 555          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2017    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
